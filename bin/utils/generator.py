# generator.py
# by Preston Hager
# for Aurora Compiler

class Generator:
    def __init__(self, parser):
        """
        Creates a new Generator instance

        Parameters
        ----------
        parser : Parser
            Parser to link to the generator

        Returns
        -------
        Generator
            New Generator instance with previous parameters.
        """
        self.parser = parser
        self.generated_code = "; generated by Aurora Compiler by Preston Hager\n; https://github.com/PrestonHager/AuroraCompiler\n[BITS 32]\n\n"

    def generate(self):
        """
        Generates new code from the parser's AST
        """
        for node in self.parser.ast.children:
            self.generated_code += self._generate(node)

    def _generate(self, node):
        generated = ""
        if node.name == "COMMENT":
            generated += f"; {node.children[0].value.strip()}"
        if node.name == "FUNCTION":
            children_dict = self._children_dictionary(node)
            name = children_dict["NAME"].value
            arguments = children_dict["ARGUMENTS"].children
            if name == "include":
                type = arguments[0]
                if type.name == "STRING":
                    file = arguments[0].value
                else:
                    file = "_aurora_" + arguments[0].value
                generated += f"%include \"{file}\""
            elif name == "_asm":
                generated += f"{arguments}"
            else:
                generated += f"; Arguments: {arguments}\ncall {name}"
        return generated.strip()+"\n"

    def _children_dictionary(self, node):
        children_dictionary = {}
        for child in node.children:
            children_dictionary[child.name] = child
        return children_dictionary
