RETURN_TYPE := =>
FUNCTION_DEFINTION := func
END := end
THEN := then
RETURN := return
PARAMETER := ::
FUNCTION := >
FUNCTION_END := <

STRING_KEYWORD := String
NUMBER_KEYWORD := Number
VARIABLE := :

INDEX_START := {
INDEX_END := }
POINTER_START := [
POINTER_END := ]
GROUP_START := (
GROUP_END := )

STRING_DEFINITION := "
ENDLINE := ;
SPACE := \s
NEWLINE := \n
COMMA := ,

EQUALS := =
PLUS_EQUALS := +=
PLUS_EQUALS_ONE := ++
MINUS_EQUALS := -=
MINUS_EQUALS_ONE := --

TIMES := *
EXPONENT := **
DIVIDE := /
PLUS := +
MINUS := -
DOT := .
COMMENT := //

EQUALS_TEST := ?=
NOT_EQUAL_TEST := ?!=
LESS_THAN_TEST := ?<
GREATER_THAN_TEST := ?>
LESS_THAN_EQUAL_TEST := ?<=
GREATER_THAN_EQUAL_TEST := ?>=

BYTE_KEYWORD := byte
WORD_KEYWORD := word
DOUBLE_WORD_KEYWORD := dword
