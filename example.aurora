// Example file for Aurora

// comments start with a double slash.
// all commands end with a semi colon.

// a print statement prints to the screen exactly what is in the input string.
print>"Somewhere over the rainbow!";

// println adds a newline after the end.
println>"Next line....";
print>"Now I'm on a new line.";

// a variable is defined by it's type, name, =, and then the value.
// to define a string it's:
String: IM_A_STRING = "Some string.";
// to define an integer it's:
Number: IM_AN_INT = 100;
// to define a float it's
Number: IM_A_FLOAT = 3.1415;

// you can also do math!
// addition uses the + sign. subtraction the -, division the /, and multiplication the *.
// for example, variable is 5 * 3, which is 15.
Number: variable = 5 * 3;

// to define a function:
// the "func" tag starts the definition. the next is the function name with parentheses incasing the parameters.
// the parameters have names and a double colon to define the type of input.
// the next part is what the function returns, in this case nothing.
func: say_hi>name::String => Void;
  // inside this function we say hi to the variable name by printing.
  print>"Hi, ";
  println>name;
  // and we end the definition of the function with the "end" tag.
end;

func: new>var::Number => Number;
  return 0;
end;

// to call this all we need is the following.
say_hi>"EXAMPLE";
// this will print "Hi, EXAMPLE" to the screen.

// if statements are done like so (the space spaces are optional here),
if>variable == 15; then;
  // declare the if tag and an expression to test. then a then tag.
  // inside this we can run  multiple lines of code.
  // if no "then" tag is declared it only runs one line and no end tag can be declared.
  say_hi>IM_A_STRING;
end;

// example of one lined if.
if>variable+2 ==17;
  // comments don't count as lines of code.
  println>"That's true, varaible+2 is equal to 17.";
// never write the above code, it's not readable at all.
